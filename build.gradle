/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'java'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    api 'org.apache.commons:commons-lang3:3.12.0'
    api 'commons-cli:commons-cli:1.5.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
}

group = 'io.reliza'
version = '2022.04.5-SNAPSHOT'
description = 'versioning'
java.sourceCompatibility = JavaVersion.VERSION_1_8

task changeVersion {
	doLast {
		if(project.hasProperty('newVersion')) {
			String s=buildFile.getText().replaceFirst("version = '$version'","version = '"+newVersion+"'")
			buildFile.setText(s)
		}
	}
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

if (!project.hasProperty("centralUser")) {
	ext.centralUser = 'test'
}
if (!project.hasProperty("centralPassword")) {
	ext.centralPassword = 'test'
}

java {
	// withJavadocJar()
	withSourcesJar()
}
test {
  useJUnitPlatform()
}
publishing {
	publications {
		relizaJavaClient(MavenPublication) {
			artifactId = 'versioning'
			from components.java
			pom {
				name = 'versioning'
				description = 'Reliza Versioning allows for automatic generation and bumping of CalVer or SemVer or custom version schemas.'
				url = 'https://reliza.io'
				licenses {
					license {
						name = 'MIT License'
						url = 'https://github.com/relizaio/versioning/blob/main/LICENSE'
					}
				}
				developers {
					developer {
						id = 'taleodor'
						name = 'Pavel Shukhman'
						email = 'info@reliza.io'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/relizaio/versioning.git'
					developerConnection = 'scm:git:ssh://github.com/relizaio/versioning.git'
					url = 'https://github.com/relizaio/versioning/'
				}
			}
		}
	}
	
	repositories {
		maven {
			name = 'central'
			url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
			credentials {
				username "$centralUser"
				password "$centralPassword"
			}
		}
	}

}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}
